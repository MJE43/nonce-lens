---
alwaysApply: true
description: Core requirements and architecture for Pump Analyzer Web implementation
---

# Pump Analyzer Web - Core Implementation Guide

## Project Overview
You are implementing a local-first web tool that deterministically replays Stake Pump outcomes for provably-fair gaming analysis. This is a single-user, local-only application with **deterministic correctness as the highest priority**.

## Tech Stack
- **Backend**: FastAPI (Python 3.11) + SQLite + SQLModel ORM
- **Frontend**: React (Vite + TypeScript) + TanStack Query + Tailwind CSS
- **Database**: SQLite with aiosqlite driver
- **CORS**: Allow `http://localhost:5173` only

## Critical Architecture Principles

### 1. Determinism First
- Identical inputs MUST produce identical outputs across all platforms
- Golden test vector MUST pass: server=`564e967b90f03d0153fdcb2d2d1cc5a5057e0df78163611fe3801d6498e681ca`, client=`zXv1upuFns`, nonce=`5663`, difficulty=`expert` → max_multiplier=`11200.65`
- Use `ATOL=1e-9` for floating-point target matching
- Engine version tracking for traceability

### 2. Performance Requirements
- 200k nonces analyzed in ≤10 seconds typical
- 500k nonces in ≤30 seconds target
- Maximum range: 500k nonces per run (configurable up to 1M)
- Synchronous computation (no background queues for MVP)

### 3. Data Storage Strategy
- Store runs metadata and hits only (nonce + max_multiplier pairs)
- Generate full per-nonce CSV on demand (do NOT store in database)
- Use ON DELETE CASCADE from runs to hits

## Repository Structure
```
pump-api/               # FastAPI backend
  app/
    main.py            # FastAPI app entry point
    core/config.py     # Configuration and environment
    db.py             # Database setup and connection
    engine/pump.py    # Core Pump analysis engine
    models/runs.py    # SQLModel database models
    routers/          # API route handlers
    schemas/runs.py   # Pydantic request/response schemas
  tests/              # Unit and integration tests

pump-frontend/          # React frontend
  src/
    App.tsx          # Main app component
    lib/api.ts       # API client utilities
    pages/           # Page components
      RunsList.tsx   # List all runs with filtering
      NewRun.tsx     # Create new analysis run
      RunDetail.tsx  # View run details and hits
```

## Key Implementation Notes
- Engine functions are called synchronously per request
- List view shows SHA256 hash of server seed (first 10 chars)
- Detail view can show raw server seed
- CSV exports link directly to streaming API endpoints
- Form validation on both client and server sides
