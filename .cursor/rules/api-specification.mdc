---
globs: *.py,routers/*.py,schemas/*.py,main.py
description: FastAPI implementation requirements and endpoint specifications
---

# FastAPI Implementation Specification

## Core Endpoints (REQUIRED)

### POST /runs - Create Analysis Run
```python
# Request Schema
class RunCreate(BaseModel):
    server_seed: str
    client_seed: str
    start: int  # >= 1
    end: int    # >= start
    difficulty: Literal["easy", "medium", "hard", "expert"]
    targets: list[float]  # Must have >= 1 target

# Response: 201 Created with RunDetail JSON
# Errors: 422 validation, 413 range too large, 500 server error
```

### GET /runs - List Runs
```python
# Query params: limit (default 50, max 200), offset (default 0)
# Optional: search (client_seed substring), difficulty filter
# Response: Array of RunRead with minimal fields + target counts
```

### GET /runs/{id} - Run Details
```python
# Response: Full RunDetail with summary, inputs, engine_version
```

### GET /runs/{id}/hits - Paginated Hits
```python
# Query: min_multiplier (optional float), limit (default 100, max 10k), offset
# Response: { total: number, rows: [{ nonce: number, max_multiplier: number }] }
# Sorted by nonce ASC
```

### GET /runs/{id}/export/hits.csv - Stream Hits CSV
```python
# Headers: Content-Type: text/csv, Content-Disposition: attachment
# Format: nonce,max_multiplier
```

### GET /runs/{id}/export/full.csv - Stream Full CSV
```python
# Recompute on demand (do NOT store in database)
# Format: nonce,max_pumps,max_multiplier,pop_point
```

### GET /verify - Single Nonce Verification
```python
# Query: server_seed, client_seed, nonce, difficulty
# Response: { max_pumps: int, max_multiplier: float, pop_point: int }
```

## Validation Rules (CRITICAL)

### Input Validation
```python
# Reject empty seeds, negative/zero ranges, invalid difficulty
# Parse targets: comma-separated, strip whitespace, convert to float
# Remove NaN/duplicates, require >= 1 target
# Sort targets for consistent display

# Range validation
MAX_NONCES = 500_000  # Configurable
if (end - start + 1) > MAX_NONCES:
    raise HTTPException(413, "Range too large")
```

### Error Response Format
```python
{
    "error": {
        "code": "VALIDATION_ERROR",
        "message": "Descriptive error message",
        "field": "targets"  # Optional field name
    }
}
```

## Database Operations

### Bulk Insert Pattern
```python
# Create run record first
run = Run(**run_data)
db.add(run)
await db.commit()

# Bulk insert hits efficiently
hits_data = [{"run_id": run.id, "nonce": n, "max_multiplier": m}
            for n, m in hits]
await db.execute(insert(Hit).values(hits_data))
await db.commit()
```

### CSV Streaming Pattern
```python
from fastapi.responses import StreamingResponse

def generate_csv_rows():
    yield "nonce,max_multiplier\n"
    for hit in hits_query:
        yield f"{hit.nonce},{hit.max_multiplier}\n"

return StreamingResponse(
    generate_csv_rows(),
    media_type="text/csv",
    headers={"Content-Disposition": "attachment; filename=hits.csv"}
)
```

## CORS Configuration
```python
from fastapi.middleware.cors import CORSMiddleware

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],  # Frontend dev server
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

## Status Codes
- 200: OK (GET requests)
- 201: Created (POST /runs)
- 204: No Content
- 400/422: Input validation errors
- 404: Not Found
- 413: Request Entity Too Large (range exceeded)
- 500: Internal Server Error
